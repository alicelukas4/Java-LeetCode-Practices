/*
 * Given an array S of n integers, find three integers in S such that 
 * the sum is closest to a given number, target. Return the sum of the 
 * three integers. You may assume that each input would have exactly one solution.
    For example, given array S = {-1 2 1 -4}, and target = 1.
    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
	-4 -1 1 2
	-3 -4 
 */
import java.util.Arrays;

public class ThreeSumClosest {

	ThreeSumClosest(int[] array, int target)
	{
		Arrays.sort(array); 
		int result = 65536; 
		for(int i = 0; i<array.length-2; i++)
		{
			int start = i+1; int end = array.length-1;
			while(start<end)
			{
				int sum = array[start]+array[end]+array[i];
				System.out.println(array[start]+" "+array[end]+" "+array[i]);

				if(sum>target)
				{
					start++;
				}
				else if(sum< target)
				{
					end--; 
				}
				if(Math.abs(sum-target) < Math.abs(result-target))
				{
					result = sum; 
				}
			
			}
		}
		System.out.println(result);
}
	public static void main(String[] args) {
		int[] array = {-1, 2, 1, -4, 1, 0, 0};
		int target = 1; 
		
		ThreeSumClosest closestSum = new ThreeSumClosest(array, target);
	}
}
